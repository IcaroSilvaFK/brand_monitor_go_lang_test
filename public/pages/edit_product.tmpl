<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles/dist/reset.css">
  <link rel="stylesheet" href="/styles/dist/edit_product.styles.css">

  <script src="https://unpkg.com/@phosphor-icons/web" defer></script>
  <title>BRANDSOTRE | Editar Produto {{ .product.Name }}</title>
</head>

<body>
  {{template "header.tmpl" }}

  <main class="container__main">
    <header>
      <nav>
        <ul>
          <li>
            <a href="/products">
              Home
              <i class="ph-fill ph-house"></i>
            </a>
          </li>
          <li>
            <i class="ph-fill ph-caret-right"></i>
          </li>
          <li>
            editar produto <i class="ph-fill ph-pencil-line"></i>
          </li>
        </ul>
      </nav>
      <h3>Editar Produto</h3>
    </header>

    <form action="">
      <div>
        <div class="form__col">
          <label for="name">Nome do produto</label>
          <input type="text" id="name" name="name" placeholder="Digite o nome do produto" value="{{ .product.Name }}">
        </div>
        <div class="form__col">
          <label for="price">Preço</label>
          <input type="number" id="price" name="price" placeholder="Digite o valor do produto"
            value="{{ .product.Price }}">
        </div>
      </div>
      <div>
        <div class="form__input_file">
          <label for="image">Imagem</label>
          <img src="{{.product.ImageURL}}" id="product_image" />
          <input type="file" id="image" name="image" value="{{ .product.ImageURL }}" onchange="">
        </div>
        <div class="form__col">
          <label for="quantity">Quantidade</label>
          <input type="number" id="quantity" name="quantity" placeholder="Digite a quantidade do produto"
            value="{{ .product.Quantity }}">
        </div>
      </div>

      <div class="form__col">
        <header>
          <label for="description">Descrição</label>
          <span><span id="description_length">0</span>/250</span>
        </header>
        <textarea name="description" id="description" name="description" value="{{ .product.Description }}"
          placeholder="Descrição do produto" maxlength="250">
        {{ .product.Description }}</textarea>
      </div>
      <footer>
        <button type="submit">Salvar</button>
      </footer>
    </form>
  </main>
  {{ template "footer.tmpl"}}

  <div class="toast" id="success" style="display: none;">
    <div class="toast__content">
      <span>Produto atualizado com sucesso</span>
    </div>
  </div>


  <div class="toast" id="loading" style="display: none;">
    <div class="toast__content">
      <span>Carregando...</span>
    </div>
  </div>

  <script>
    const toastSuccess = document.getElementById("success")
    const toastLoading = document.getElementById("loading")
    const inputFile = document.getElementById("image")
    const form = document.querySelector("form")
    const productId = "{{ .product.ID }}"
    const descriptionInput = document.getElementById("description")
    const descriptionLength = document.getElementById("description_length")
    const productImage = document.getElementById("product_image")
    const defaultLengthFromColor = descriptionInput.textContent.length


    verifyDefaultColorFromLengthDescription(defaultLengthFromColor)
    trimSpaceOnDefaultDescriptionAndAddDefaultLength()

    inputFile.addEventListener("change", e => {
      const targetFile = e.target.files[0]

      const reader = new FileReader()

      productImage.alt = targetFile.name

      reader.onload = () => {
        productImage.src = reader.result
      }
      reader.readAsDataURL(targetFile)
    })

    descriptionInput.addEventListener('input', e => {
      const value = e.target.value.length
      descriptionLength.innerText = value

      verifyDefaultColorFromLengthDescription(value)
    })

    form.addEventListener('submit', async e => {
      e.preventDefault()

      toastLoading.style.display = "block"
      toastLoading.style.background = "#F6E05E";

      const url = `/products/${productId}`
      const formData = new FormData(form)
      await fetch(url, {
        method: 'PUT',
        body: formData
      })

      toastSuccess.style.display = "block"
      window.location.href = "/products"
    })

    function verifyDefaultColorFromLengthDescription(length) {
      if (length < 200) {
        descriptionLength.style.color = "#00875f"
      }
      if (length >= 200) {
        descriptionLength.style.color = "#F6E05E"
      }
      if (length >= 250) {
        descriptionLength.style.color = "#f75a78"
      }
    }

    function trimSpaceOnDefaultDescriptionAndAddDefaultLength() {
      descriptionInput.innerText = descriptionInput.innerHTML.trim()
      descriptionLength.innerText = "{{.product.Description}}".length
    }
  </script>
</body>

</html>